open Ext
open Helper
open Types
open Printf
open Filepath

exception ConfigChanged of string

let getDigestKV () =
    let digest = Project.digest () in
    [ ("obuild-digest", digest) ]

let generateFile file f =
    let buffer = Buffer.create 1024 in
    f (Buffer.add_string buffer);
    Filesystem.writeFile file (Buffer.contents buffer)

let generateMlFile project file flags =
    generateFile file (fun add ->
        add "(* autogenerated file by obuild. do not modify *)\n";
        add (sprintf "let project_version = \"%s\"\n" project.Prepare.project_file.Project.version);
        (* TODO escape name properly *)
        List.iter (fun (name, v) -> add (sprintf "let project_flag_%s = %b\n" name v)) flags;
    )

let generateCFile project file flags =
    generateFile file (fun add ->
        add "/* autogenerated file by obuild. do not modify */\n";
        add (sprintf "#define PROJECT_VERSION \"%s\"\n" project.Prepare.project_file.Project.version);
        (* TODO escape name properly *)
        List.iter (fun (name, v) ->
            add (sprintf "#define PROJECT_FLAG_%s %d\n" (String.uppercase name) (if v then 1 else 0))
        ) flags;
    )

let get_system project =
    let allDeps  = project.Prepare.project_all_deps in
    let depTable = project.Prepare.project_dep_data in
    List.iter (fun (dep, constr) ->
        let depData = Hashtbl.find depTable dep.dep_name in
        (* TODO compare version in meta file*)
        ()
    ) allDeps;
    ()

let makeSetup digestKV project = digestKV @ hashtbl_toList project.Prepare.project_ocamlcfg

let comparekvs reason setup l =
    List.iter (fun (k,v) ->
        try let v' = List.assoc k setup in
            if v' <> v then raise Not_found
        with Not_found -> raise (ConfigChanged reason)
    ) l

let run projFile tweakFlags =
    let project = Prepare.prepare projFile Prepare.defaultBuildOpts in

    Dist.checkOrCreate ();
    let digestKV = getDigestKV () in

    let autogenDir = Dist.createBuildDest Dist.Autogen in

    let flagsVal =
        List.map (fun flag ->
            let name = flag.Project.flag_name in
            let def  = flag.Project.flag_default in

            let override = ref None in
            List.iter (fun tw ->
                match tw with
                | ClearFlag s -> if s == name then override := Some false
                | SetFlag   s -> if s == name then override := Some true
            ) tweakFlags;

            match (!override, def) with
            | (None, None)   -> (name, false)
            | (None, Some v) -> (name, v)
            | (Some v, _)    -> (name, v)
        ) projFile.Project.flags
        in

    let currentSetup = makeSetup digestKV project in
    let actualSetup = try Some (Dist.read_setup ()) with _ -> None in
    let projectSystemChanged =
        match actualSetup with
        | None     -> true
        | Some stp ->
            (* TODO harcoded for now till we do all the checks. *)
            try comparekvs "setup" stp currentSetup; (* FORCED should be false *) true
            with _ -> true
        in

    if projectSystemChanged then (
        generateMlFile project (autogenDir </> fn "path_generated.ml") flagsVal;
        generateCFile project (autogenDir </> fn "obuild_macros.h") flagsVal;

        (* write setup file *)
        Filesystem.removeDirContent Dist.distPath;
        Dist.write_setup currentSetup
    )

let check () =
    Dist.checkOrFail ();

    let setup = Dist.read_setup () in
    let ocamlCfg = Prog.getOcamlConfig () in
    let digestKV = getDigestKV () in

    comparekvs "ocaml config" setup ocamlCfg;
    comparekvs "digest" setup digestKV;

    ()
